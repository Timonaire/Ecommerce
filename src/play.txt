const { userService } = require("../services/create.service");
const { hashPassword, verifyPassword } = require("../services/bcrypt.service");
const { isValidObjectId } = require("../utils/id.utils");
const cloudinary = require("../services/cloudinary.service");
const notify = require("../services/mail.service");
const Mails = require("../configs/mails.constant.config");
const objectToString = require("../utils/objToString.utils");

class UserController {
  async updateUser(req, res) {
    try {
      const userId = req.params.id;

      if (!isValidObjectId(userId)) {
        return res.status(400).json({
          success: false,
          message: "Invalid user ID"
        });
      }

      const existingUser = await userService.findOne({
        _id: userId,
        deleted: false,
      });

      if (!existingUser) {
        return res.status(404).json({
          success: false,
          message: "This user does not exist",
        });
      }

      if (req.session.user.id !== existingUser._id.toString()) {
        return res.status(403).json({
          success: false,
          message: "You cannot update this user"
        });
      }

      let imageUrl = "";

      if (req.files && req.files.length > 0) {
        for (const file of req.files) {
          const result = await cloudinary.uploader.upload(file?.path);
          imageUrl = result.secure_url;
        }
      }

      const data = {};

      if (req.body.fullname) {
        data.fullname = req.body.fullname;
      }
      // ... (similarly for other fields)

      if (imageUrl) {
        data.avatar = imageUrl;
      }

      // Password update logic here...

      const updatedUser = await userService.updateOne(userId, data);

      // Email notifications...
      
      const updateMessages = {
        fullname: "Your fullname has been updated successfully!",
        email: "Your email has been updated successfully!",
        // ... (similarly for other fields)
      };

      const messages = objectToString(updateMessages);

      for (const message of messages) {
        await notify.sendMail(
          req.session.user,
          req.session.user.email,
          Mails.accountUpdated,
          message
        );
      }

      return res.status(200).json({
        success: true,
        message: updateMessages,
        data: updatedUser,
      });
    } catch (err) {
      return res.status(500).json({
        success: false,
        message: err.message
      });
    }
  }

  // ... (other methods similarly optimized)
}

module.exports = new UserController();
